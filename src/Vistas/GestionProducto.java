
package Vistas;

import AccesoADatos.ProductoData;
import Entidades.Producto;
import java.awt.Color;
import java.awt.Component;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author PcRa
 */
public class GestionProducto extends javax.swing.JInternalFrame {
    
    private int filaSeleccionada = -1;
    
     private DefaultTableModel modelo = new DefaultTableModel() {

        public boolean isCellEditable(int f, int c) {
            return false;

        }

    };
     
     
    
    /**
     * Creates new form GestionProducto
     */
    public GestionProducto() {
        initComponents();
         armarCabecera();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTDescripcion = new javax.swing.JTextField();
        jTNombre = new javax.swing.JTextField();
        jTStock = new javax.swing.JTextField();
        jTPrecioActual = new javax.swing.JTextField();
        jREstado = new javax.swing.JRadioButton();
        jBNuevo = new javax.swing.JButton();
        jBBuscar = new javax.swing.JButton();
        jBGuardar = new javax.swing.JButton();
        jBEliminar = new javax.swing.JButton();
        jBSalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTProductos = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jTId = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jBStockM10 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 102, 102));

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel1.setText("<html><u>Gesti√≥n de Productos</u>\n\n\n\n\n");

        jLabel3.setText("Descripcion :");

        jLabel4.setText("Nombre :");

        jLabel5.setText("Precio Actual $ :");

        jLabel6.setText("Stock :");

        jLabel7.setText("Estado :");

        jBNuevo.setText("Nuevo");
        jBNuevo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBNuevo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBNuevoMouseClicked(evt);
            }
        });

        jBBuscar.setText("Buscar");
        jBBuscar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBBuscarMouseClicked(evt);
            }
        });

        jBGuardar.setText("Guardar");
        jBGuardar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBGuardarMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jBGuardarMousePressed(evt);
            }
        });

        jBEliminar.setText("Eliminar");
        jBEliminar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBEliminarMouseClicked(evt);
            }
        });

        jBSalir.setBackground(new java.awt.Color(255, 255, 255));
        jBSalir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBSalir.setText("Salir");
        jBSalir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBSalir.setBorderPainted(false);
        jBSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBSalirMouseClicked(evt);
            }
        });

        jTProductos.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTProductos.setCellSelectionEnabled(true);
        jTProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTProductos);
        if (jTProductos.getColumnModel().getColumnCount() > 0) {
            jTProductos.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        jLabel8.setText("ID :");

        jTId.setBackground(new java.awt.Color(0, 102, 102));
        jTId.setForeground(new java.awt.Color(255, 255, 255));

        jTextField1.setBackground(new java.awt.Color(204, 0, 0));

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jLabel2.setText("Stock <= 10");

        jBStockM10.setText("Buscar");
        jBStockM10.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBStockM10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBStockM10MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTDescripcion)
                            .addComponent(jTPrecioActual)
                            .addComponent(jTStock)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jREstado)
                                .addGap(0, 130, Short.MAX_VALUE)))
                        .addComponent(jTNombre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTId, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jBEliminar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBGuardar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                        .addComponent(jBNuevo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jBBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jBStockM10, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jTId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jBGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jBEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTPrecioActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jREstado)))
                            .addComponent(jLabel6))))
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBStockM10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBSalirMouseClicked

        dispose();

    }//GEN-LAST:event_jBSalirMouseClicked

    private void jBGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBGuardarMouseClicked
      
       
    }//GEN-LAST:event_jBGuardarMouseClicked

    private void jBGuardarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBGuardarMousePressed



        try {
            String nom = jTNombre.getText();
            String des = jTDescripcion.getText();
            Double pa = Double.parseDouble(jTPrecioActual.getText());
            int st = Integer.parseInt(jTStock.getText());
            boolean estado = jREstado.isSelected();

            if (pa <= 0 || st <= 0) {
                JOptionPane.showMessageDialog(null, "El precio y el stock deben ser mayores que cero.", "ERROR", JOptionPane.ERROR_MESSAGE);
            } else {
                if (jTId.getText().isEmpty() && !nom.isEmpty() && !des.isEmpty()) {
                   
                    Producto nuevoProducto = new Producto(nom, des, pa, st, estado);
                    ProductoData.agregarProducto(nuevoProducto);
                } else {
                   
                    int id = Integer.parseInt(jTId.getText());
                    Producto productoExistente = new Producto(id, nom, des, pa, st, estado);
                    ProductoData.actualizarProducto(productoExistente);
                }

                limpiarCampos();
                cargarTablaProductos();
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, "Ingreso inv√°lido y/o Campos Vac√≠os", "ERROR", JOptionPane.ERROR_MESSAGE);
            limpiarCampos();
        }




    }//GEN-LAST:event_jBGuardarMousePressed

    private void jBBuscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBBuscarMouseClicked
        
        String idB = jTId.getText();
        String nombre = jTNombre.getText();

        if (idB.isEmpty() && nombre.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Campos para b√∫squeda vacios", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
            limpiarCampos();
        } else {

            if (nombre.isEmpty()) {
                try {
                    int idBuscado = Integer.parseInt(idB);
                    Producto productoEncontrado = ProductoData.buscarProductoPorId(idBuscado);

                    if (productoEncontrado != null) {

                        cargarProducto(productoEncontrado);

                    } else {

                        if (idBuscado <= 0) {
                            JOptionPane.showMessageDialog(null, "El ID debe ser mayor a cero.", "ERROR", JOptionPane.ERROR_MESSAGE);
                            limpiarCampos();
                        } else {

                            JOptionPane.showMessageDialog(null, "Producto no encontrado por ID", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
                            limpiarCampos();
                        }
                    }

                } catch (NumberFormatException nfe) {

                    JOptionPane.showMessageDialog(null, "Ingreso Inv√°lido", "ERROR", JOptionPane.ERROR_MESSAGE);
                    limpiarCampos();
                }
            }
            else if (idB.isEmpty() && !nombre.equals("*.*")) {
                List<Producto> productosEncontrados = ProductoData.buscarProductoPorNombre(nombre);

                if (!productosEncontrados.isEmpty()) {
                    
                    cargarTablaPorNombre(nombre);

                } else {

                    JOptionPane.showMessageDialog(null, "No se encontraron productos", "Error", JOptionPane.ERROR_MESSAGE);
                    limpiarCampos();
                }
            }else {
            List<Producto> productosEncontrados = ProductoData.listarProductos();
            cargarTablaProductos();
            
            }
        }
    }//GEN-LAST:event_jBBuscarMouseClicked

    private void jBNuevoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBNuevoMouseClicked

        limpiarCampos();

    }//GEN-LAST:event_jBNuevoMouseClicked

    private void jBEliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBEliminarMouseClicked
      try{  
       int id = Integer.parseInt(jTId.getText());

    
    ProductoData.eliminarProducto(id);

    
    limpiarCampos();

   
    Producto productoInactivo = ProductoData.buscarProductoInactivoPorId(id);

    if (productoInactivo != null) {
        
        jTId.setText(String.valueOf(productoInactivo.getIdProducto()));
        jTNombre.setText(productoInactivo.getNombreProducto());
        jTDescripcion.setText(productoInactivo.getDescripcion());
        jTPrecioActual.setText(String.valueOf(productoInactivo.getPrecioActual()));
        jTStock.setText(String.valueOf(productoInactivo.getStock()));
        jREstado.setSelected(productoInactivo.isEstado());

    } else {
        
        JOptionPane.showMessageDialog(null, "Producto no encontrado por ID o el producto est√° activo.", "ERROR", JOptionPane.ERROR_MESSAGE);
    }
    }catch(NumberFormatException nfe){
    JOptionPane.showMessageDialog(null, "Campos Vacios","ERROR",JOptionPane.ERROR_MESSAGE);
    limpiarCampos();
    }
      
    }//GEN-LAST:event_jBEliminarMouseClicked

    private void jTProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTProductosMouseClicked

       filaSeleccionada = jTProductos.getSelectedRow();
    if (filaSeleccionada >= 0) {
        jTId.setText(jTProductos.getValueAt(filaSeleccionada, 0).toString());
        jTNombre.setText(jTProductos.getValueAt(filaSeleccionada, 1).toString());
        jTDescripcion.setText(jTProductos.getValueAt(filaSeleccionada, 2).toString());
        jTPrecioActual.setText(jTProductos.getValueAt(filaSeleccionada, 3).toString());
        jTStock.setText(jTProductos.getValueAt(filaSeleccionada, 4).toString());
        jREstado.setSelected((boolean) jTProductos.getValueAt(filaSeleccionada, 5));
    }
      
    }//GEN-LAST:event_jTProductosMouseClicked

    private void jBStockM10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBStockM10MouseClicked
        
       int stockMinimo = 10;
    List<Producto> productosDebajoStockMinimo = ProductoData.obtenerProductosXDebajoStockMinimo(stockMinimo);

    if (productosDebajoStockMinimo.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No hay productos por debajo del stock m√≠nimo.");
    } else {
        modelo.setRowCount(0);

       
        for (Producto producto : productosDebajoStockMinimo) {
            modelo.addRow(new Object[]{
                producto.getIdProducto(),
                producto.getNombreProducto(),
                producto.getDescripcion(),
                producto.getPrecioActual(),
                producto.getStock(),
                producto.isEstado()
            });
        }

        jTProductos.setModel(modelo);
    }

       
    }//GEN-LAST:event_jBStockM10MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBuscar;
    private javax.swing.JButton jBEliminar;
    private javax.swing.JButton jBGuardar;
    private javax.swing.JButton jBNuevo;
    private javax.swing.JButton jBSalir;
    private javax.swing.JButton jBStockM10;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JRadioButton jREstado;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTDescripcion;
    private javax.swing.JTextField jTId;
    private javax.swing.JTextField jTNombre;
    private javax.swing.JTextField jTPrecioActual;
    private javax.swing.JTable jTProductos;
    private javax.swing.JTextField jTStock;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {

        jTId.setText("");
        jTNombre.setText("");
        jTDescripcion.setText("");
        jTPrecioActual.setText("");
        jTStock.setText("");
        jREstado.setSelected(false);

        modelo.setRowCount(0);
    }

    private void cargarProducto(Producto producto) {

        jTNombre.setText(producto.getNombreProducto());
        jTDescripcion.setText(producto.getDescripcion());
        jTPrecioActual.setText(String.valueOf(producto.getPrecioActual()));
        jTStock.setText(String.valueOf(producto.getStock()));
        jREstado.setSelected(producto.isEstado());
    }

    private void armarCabecera() {
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Descripcion");
        modelo.addColumn("Precio $");
        modelo.addColumn("Stock");
        modelo.addColumn("Estado");
        jTProductos.setModel(modelo);
    
    
        
    JTableHeader encabezadoTabla = jTProductos.getTableHeader();
    encabezadoTabla.setBackground(Color.cyan); 
    
    TableColumnModel columna = jTProductos.getColumnModel();
    columna.getColumn(0).setMinWidth(50);   
    columna.getColumn(0).setPreferredWidth(50); 
    columna.getColumn(0).setMaxWidth(120);  
    
    columna.getColumn(3).setMinWidth(70);
    columna.getColumn(3).setPreferredWidth(70);
    columna.getColumn(3).setMaxWidth(140);
    
    columna.getColumn(4).setMinWidth(50);
    columna.getColumn(4).setPreferredWidth(50);
    columna.getColumn(4).setMaxWidth(120);
    
    columna.getColumn(5).setMinWidth(50);
    columna.getColumn(5).setPreferredWidth(50);
    columna.getColumn(5).setMaxWidth(120);
    }

    private void cargarTablaPorNombre(String nombre) {
              
        modelo.setRowCount(0);

        List<Producto> productosEncontrados = ProductoData.buscarProductoPorNombre(nombre);

        if (!productosEncontrados.isEmpty()) {
            for (Producto producto : productosEncontrados) {
                modelo.addRow(new Object[]{
                    producto.getIdProducto(),
                    producto.getNombreProducto(),
                    producto.getDescripcion(),
                    producto.getPrecioActual(),
                    producto.getStock(),
                    producto.isEstado()
                });
            }
        }
        
        jTProductos.setModel(modelo);
        

    }

    private void cargarTablaProductos() {
         modelo.setRowCount(0);

        List<Producto> productosEncontrados = ProductoData.listarProductos();

        if (!productosEncontrados.isEmpty()) {
            for (Producto producto : productosEncontrados) {
                modelo.addRow(new Object[]{
                    producto.getIdProducto(),
                    producto.getNombreProducto(),
                    producto.getDescripcion(),
                    producto.getPrecioActual(),
                    producto.getStock(),
                    producto.isEstado()
                });
            }
        }
        
        jTProductos.setModel(modelo);
        
      
    jTProductos.getColumnModel().getColumn(4).setCellRenderer(new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            
            int stock = Integer.parseInt(table.getValueAt(row, 4).toString());

           
            if (stock <= 10) {
                component.setBackground(Color.RED);
            } else {
                component.setBackground(Color.WHITE);
            }

            return component;
        }
    });
        
    }

}
